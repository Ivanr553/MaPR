// <auto-generated />
using Marine_Permit_Palace.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace Marine_Permit_Palace.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180320111315_categoryIntro")]
    partial class categoryIntro
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Marine_Permit_Palace.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int>("Age");

                    b.Property<DateTime>("CivilianLicExpDate");

                    b.Property<DateTime>("CivilianLicIssueDate");

                    b.Property<string>("CivilianLicNumber");

                    b.Property<string>("CivilianLicState");

                    b.Property<string>("ClassOfVehicle");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<int>("DodIdNumber");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("EyeColor");

                    b.Property<string>("FirstName");

                    b.Property<string>("HairColor");

                    b.Property<decimal>("Height");

                    b.Property<string>("HomeOfRecord");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MedicalCertRequired");

                    b.Property<string>("MiddleName");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("Organization");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PlaceOfBirth");

                    b.Property<string>("Rank");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Sex");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<bool>("WearsGlasses");

                    b.Property<decimal>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Marine_Permit_Palace.Models.Category", b =>
                {
                    b.Property<Guid>("IdCategory")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreatedUtc");

                    b.Property<DateTime?>("DateInactivatedUtc");

                    b.Property<DateTime>("DateLastModifiedUtc");

                    b.Property<DateTime?>("DeleteCommissionDateUtc");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("LastModifiedById");

                    b.Property<string>("Name");

                    b.HasKey("IdCategory");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Marine_Permit_Palace.Models.Document", b =>
                {
                    b.Property<Guid>("IdDocument")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CategoryId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreatedUtc");

                    b.Property<DateTime?>("DateInactivatedUtc");

                    b.Property<DateTime>("DateLastModifiedUtc");

                    b.Property<DateTime?>("DeleteCommissionDateUtc");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("LastModifiedById");

                    b.Property<string>("Name");

                    b.Property<string>("TemplateName");

                    b.HasKey("IdDocument");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("Docuemnt");
                });

            modelBuilder.Entity("Marine_Permit_Palace.Models.DocumentCheckBoxField", b =>
                {
                    b.Property<Guid>("IdSubmittedDocumentId");

                    b.Property<string>("IdFormName");

                    b.Property<DateTime>("DateCreatedUtc");

                    b.Property<DateTime?>("DateInactivatedUtc");

                    b.Property<DateTime>("DateLastModifiedUtc");

                    b.Property<DateTime?>("DeleteCommissionDateUtc");

                    b.Property<bool>("FormValue");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDelete");

                    b.HasKey("IdSubmittedDocumentId", "IdFormName");

                    b.ToTable("Document_Check_Box_Field");
                });

            modelBuilder.Entity("Marine_Permit_Palace.Models.DocumentFormField", b =>
                {
                    b.Property<Guid>("IdSubmittedDocumentId");

                    b.Property<string>("IdFormName");

                    b.Property<DateTime>("DateCreatedUtc");

                    b.Property<DateTime?>("DateInactivatedUtc");

                    b.Property<DateTime>("DateLastModifiedUtc");

                    b.Property<DateTime?>("DeleteCommissionDateUtc");

                    b.Property<string>("FormValue");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDelete");

                    b.HasKey("IdSubmittedDocumentId", "IdFormName");

                    b.ToTable("Document_Form_Field");
                });

            modelBuilder.Entity("Marine_Permit_Palace.Models.DocumentSignatureField", b =>
                {
                    b.Property<Guid>("IdSubmittedDocumentId");

                    b.Property<string>("IdFormName");

                    b.Property<DateTime>("DateCreatedUtc");

                    b.Property<DateTime?>("DateInactivatedUtc");

                    b.Property<DateTime>("DateLastModifiedUtc");

                    b.Property<DateTime>("DateSignedUtc");

                    b.Property<DateTime?>("DeleteCommissionDateUtc");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("SignatureValue");

                    b.HasKey("IdSubmittedDocumentId", "IdFormName");

                    b.ToTable("Document_Signature_Field");
                });

            modelBuilder.Entity("Marine_Permit_Palace.Models.IssuedPermit", b =>
                {
                    b.Property<Guid>("IdPermitId");

                    b.Property<string>("IdUserIssuedId");

                    b.Property<DateTime>("DateCreatedUtc");

                    b.Property<DateTime?>("DateInactivatedUtc");

                    b.Property<DateTime>("DateIssuedUtc");

                    b.Property<DateTime>("DateLastModifiedUtc");

                    b.Property<DateTime?>("DeleteCommissionDateUtc");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("IssuerId");

                    b.Property<Guid?>("PermitIssuedIdPermit");

                    b.HasKey("IdPermitId", "IdUserIssuedId");

                    b.HasIndex("IdUserIssuedId");

                    b.HasIndex("IssuerId");

                    b.HasIndex("PermitIssuedIdPermit");

                    b.ToTable("Issued_Permit");
                });

            modelBuilder.Entity("Marine_Permit_Palace.Models.Permit", b =>
                {
                    b.Property<Guid>("IdPermit")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreatedUtc");

                    b.Property<DateTime?>("DateInactivatedUtc");

                    b.Property<DateTime>("DateLastModifiedUtc");

                    b.Property<DateTime?>("DeleteCommissionDateUtc");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("LastModifiedById");

                    b.Property<string>("Name");

                    b.Property<int>("NumberOfDaysValid");

                    b.HasKey("IdPermit");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("Permit");
                });

            modelBuilder.Entity("Marine_Permit_Palace.Models.PermitDocumentRequirement", b =>
                {
                    b.Property<Guid>("IdPermitId");

                    b.Property<Guid>("IdDocumentId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreatedUtc");

                    b.Property<DateTime?>("DateInactivatedUtc");

                    b.Property<DateTime>("DateLastModifiedUtc");

                    b.Property<DateTime?>("DeleteCommissionDateUtc");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("LastModifiedById");

                    b.HasKey("IdPermitId", "IdDocumentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IdDocumentId");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("Permit_Document_Requirement");
                });

            modelBuilder.Entity("Marine_Permit_Palace.Models.PermitSubmittedDocIntermediate", b =>
                {
                    b.Property<Guid>("IdPermitId");

                    b.Property<Guid>("IdSubmittedDocumentId");

                    b.Property<DateTime>("DateCreatedUtc");

                    b.Property<DateTime?>("DateInactivatedUtc");

                    b.Property<DateTime>("DateLastModifiedUtc");

                    b.Property<DateTime?>("DeleteCommissionDateUtc");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDelete");

                    b.HasKey("IdPermitId", "IdSubmittedDocumentId");

                    b.HasIndex("IdSubmittedDocumentId");

                    b.ToTable("Permit_Submitted_Doc_Intermediate");
                });

            modelBuilder.Entity("Marine_Permit_Palace.Models.SubmittedDocument", b =>
                {
                    b.Property<Guid>("IdSubmittedDocument")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ContIdPermit");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCompletedUtc");

                    b.Property<DateTime>("DateCreatedUtc");

                    b.Property<DateTime?>("DateInactivatedUtc");

                    b.Property<DateTime>("DateLastModifiedUtc");

                    b.Property<DateTime?>("DeleteCommissionDateUtc");

                    b.Property<Guid>("DocumentId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCompleted");

                    b.Property<bool>("IsDelete");

                    b.Property<bool>("IsEditLocked");

                    b.Property<string>("LastModifiedById");

                    b.Property<string>("Name");

                    b.Property<string>("UserApprovingCompletionId");

                    b.Property<string>("UserLockingEditId");

                    b.HasKey("IdSubmittedDocument");

                    b.HasIndex("ContIdPermit");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DocumentId");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("UserApprovingCompletionId");

                    b.HasIndex("UserLockingEditId");

                    b.ToTable("Submitted_Document");
                });

            modelBuilder.Entity("Marine_Permit_Palace.Models.UserDocumentCategory", b =>
                {
                    b.Property<string>("IdUserInCategoryId");

                    b.Property<Guid>("IdCategoryId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreatedUtc");

                    b.Property<DateTime?>("DateInactivatedUtc");

                    b.Property<DateTime>("DateLastModifiedUtc");

                    b.Property<DateTime?>("DeleteCommissionDateUtc");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("LastModifiedById");

                    b.Property<string>("UserApprovingLinkId");

                    b.HasKey("IdUserInCategoryId", "IdCategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IdCategoryId");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("UserApprovingLinkId");

                    b.ToTable("User_Document_Category");
                });

            modelBuilder.Entity("Marine_Permit_Palace.Models.UserSupervisorIntermediate", b =>
                {
                    b.Property<string>("IdUserId");

                    b.Property<string>("IdSupervisorId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreatedUtc");

                    b.Property<DateTime?>("DateInactivatedUtc");

                    b.Property<DateTime>("DateLastModifiedUtc");

                    b.Property<DateTime?>("DeleteCommissionDateUtc");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("LastModifiedById");

                    b.HasKey("IdUserId", "IdSupervisorId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IdSupervisorId");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("User_Supervisor_Intermediate");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<string>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Role_Claim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("User_Claim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("User_External_Login");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("User_Role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("User_Token");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole<string>");


                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator().HasValue("IdentityRole");
                });

            modelBuilder.Entity("Marine_Permit_Palace.Models.Category", b =>
                {
                    b.HasOne("Marine_Permit_Palace.Models.ApplicationUser", "CreatedBy")
                        .WithMany("CategoryCreatedBy")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Marine_Permit_Palace.Models.ApplicationUser", "LastModifiedBy")
                        .WithMany("CategoryLastModBy")
                        .HasForeignKey("LastModifiedById");
                });

            modelBuilder.Entity("Marine_Permit_Palace.Models.Document", b =>
                {
                    b.HasOne("Marine_Permit_Palace.Models.Category", "Category")
                        .WithMany("Documents")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Marine_Permit_Palace.Models.ApplicationUser", "CreatedBy")
                        .WithMany("DocumentCreatedBy")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Marine_Permit_Palace.Models.ApplicationUser", "LastModifiedBy")
                        .WithMany("DocumentLastModBy")
                        .HasForeignKey("LastModifiedById");
                });

            modelBuilder.Entity("Marine_Permit_Palace.Models.DocumentCheckBoxField", b =>
                {
                    b.HasOne("Marine_Permit_Palace.Models.SubmittedDocument", "SubmittedDocument")
                        .WithMany("DocumentCheckBoxFields")
                        .HasForeignKey("IdSubmittedDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Marine_Permit_Palace.Models.DocumentFormField", b =>
                {
                    b.HasOne("Marine_Permit_Palace.Models.SubmittedDocument", "SubmittedDocument")
                        .WithMany("DocumentFormFields")
                        .HasForeignKey("IdSubmittedDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Marine_Permit_Palace.Models.DocumentSignatureField", b =>
                {
                    b.HasOne("Marine_Permit_Palace.Models.SubmittedDocument", "SubmittedDocument")
                        .WithMany("DocumentSignatureFields")
                        .HasForeignKey("IdSubmittedDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Marine_Permit_Palace.Models.IssuedPermit", b =>
                {
                    b.HasOne("Marine_Permit_Palace.Models.ApplicationUser", "UserIssued")
                        .WithMany("IssuedPermits")
                        .HasForeignKey("IdUserIssuedId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Marine_Permit_Palace.Models.ApplicationUser", "Issuer")
                        .WithMany("PermitsIssued")
                        .HasForeignKey("IssuerId");

                    b.HasOne("Marine_Permit_Palace.Models.Permit", "PermitIssued")
                        .WithMany("IssuedPermits")
                        .HasForeignKey("PermitIssuedIdPermit");
                });

            modelBuilder.Entity("Marine_Permit_Palace.Models.Permit", b =>
                {
                    b.HasOne("Marine_Permit_Palace.Models.ApplicationUser", "CreatedBy")
                        .WithMany("PermitCreatedBy")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Marine_Permit_Palace.Models.ApplicationUser", "LastModifiedBy")
                        .WithMany("PermitLastModBy")
                        .HasForeignKey("LastModifiedById");
                });

            modelBuilder.Entity("Marine_Permit_Palace.Models.PermitDocumentRequirement", b =>
                {
                    b.HasOne("Marine_Permit_Palace.Models.ApplicationUser", "CreatedBy")
                        .WithMany("PermitDocumentRequirementCreatedBy")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Marine_Permit_Palace.Models.Document", "Document")
                        .WithMany("PermitDocumentRequirements")
                        .HasForeignKey("IdDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Marine_Permit_Palace.Models.Permit", "Permit")
                        .WithMany("PermitDocumentRequirements")
                        .HasForeignKey("IdPermitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Marine_Permit_Palace.Models.ApplicationUser", "LastModifiedBy")
                        .WithMany("PermitDocumentRequirementLastModBy")
                        .HasForeignKey("LastModifiedById");
                });

            modelBuilder.Entity("Marine_Permit_Palace.Models.PermitSubmittedDocIntermediate", b =>
                {
                    b.HasOne("Marine_Permit_Palace.Models.Permit", "Permit")
                        .WithMany("PermitSubmittedDocIntermediates")
                        .HasForeignKey("IdPermitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Marine_Permit_Palace.Models.SubmittedDocument", "SubmittedDocument")
                        .WithMany("PermitSubmittedDocIntermediates")
                        .HasForeignKey("IdSubmittedDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Marine_Permit_Palace.Models.SubmittedDocument", b =>
                {
                    b.HasOne("Marine_Permit_Palace.Models.Permit", "Cont")
                        .WithMany()
                        .HasForeignKey("ContIdPermit");

                    b.HasOne("Marine_Permit_Palace.Models.ApplicationUser", "CreatedBy")
                        .WithMany("SubmittedDocumentsCreatedBy")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Marine_Permit_Palace.Models.Document", "Document")
                        .WithMany("SubmittedDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Marine_Permit_Palace.Models.ApplicationUser", "LastModifiedBy")
                        .WithMany("SubmittedDocumentsLastModBy")
                        .HasForeignKey("LastModifiedById");

                    b.HasOne("Marine_Permit_Palace.Models.ApplicationUser", "UserApprovingCompletion")
                        .WithMany("SubmittedDocumentsApproveCompletion")
                        .HasForeignKey("UserApprovingCompletionId");

                    b.HasOne("Marine_Permit_Palace.Models.ApplicationUser", "UserLockingEdit")
                        .WithMany("SubmittedDocumentsLockedBy")
                        .HasForeignKey("UserLockingEditId");
                });

            modelBuilder.Entity("Marine_Permit_Palace.Models.UserDocumentCategory", b =>
                {
                    b.HasOne("Marine_Permit_Palace.Models.ApplicationUser", "CreatedBy")
                        .WithMany("UserDocumentCategorytCreatedBy")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Marine_Permit_Palace.Models.Category", "Category")
                        .WithMany("UserDocumentCategories")
                        .HasForeignKey("IdCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Marine_Permit_Palace.Models.ApplicationUser", "UserInCategory")
                        .WithMany("InUserDocumentCategories")
                        .HasForeignKey("IdUserInCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Marine_Permit_Palace.Models.ApplicationUser", "LastModifiedBy")
                        .WithMany("UserDocumentCategoryLastModBy")
                        .HasForeignKey("LastModifiedById");

                    b.HasOne("Marine_Permit_Palace.Models.ApplicationUser", "UserApprovingLink")
                        .WithMany("UserDocumentCategoriesApproved")
                        .HasForeignKey("UserApprovingLinkId");
                });

            modelBuilder.Entity("Marine_Permit_Palace.Models.UserSupervisorIntermediate", b =>
                {
                    b.HasOne("Marine_Permit_Palace.Models.ApplicationUser", "CreatedBy")
                        .WithMany("UserSupervisorIntermediateCreatedBy")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Marine_Permit_Palace.Models.ApplicationUser", "Supervisor")
                        .WithMany("UserSupervisors")
                        .HasForeignKey("IdSupervisorId");

                    b.HasOne("Marine_Permit_Palace.Models.ApplicationUser", "User")
                        .WithMany("UserSubordinates")
                        .HasForeignKey("IdUserId");

                    b.HasOne("Marine_Permit_Palace.Models.ApplicationUser", "LastModifiedBy")
                        .WithMany("UserSupervisorIntermediateLastModBy")
                        .HasForeignKey("LastModifiedById");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Marine_Permit_Palace.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Marine_Permit_Palace.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Marine_Permit_Palace.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Marine_Permit_Palace.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
